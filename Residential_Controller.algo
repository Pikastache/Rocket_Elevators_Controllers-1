/*========================== The residential controller ================================
/*                       -Objects that need to be controlled:
/*                  1. Column (one)
/*                  2. Elevators (2) (10 Floors)
/*                  3. Call buttons
/*                  4. Doors
/*                  5. Floor request buttons
/*
/*                   Author: Saad Eddine 
/*
/*    =======================================================================================                          

DEFINE COLUMN USING id AND FloorAmount AND elevatorAmount AND status
    ID : id
    STATUS: status
    FloorAmount: FloorAmount
    elevatorList: SET to empty list   
    FloorButtonList: SET to empty list   
    requestList: SET to empty list                    
    SEQUENCE createElevatorList USING elevatorAmount 
        SET index TO 1
        FOR elevatorAmount 
            INIT newElevator TO INSTANTIATE Elevator WITH index AND "IDLE"  AND "close" AND "NONE" AND "800"
            ADD newElevator TO elevatorList 
            INCREMENT index
        ENDFOR          
    END SEQUENCE
    SEQUENCE createFloorButtonList USING floorAmount
        SET first button of FloorButtonList TO 1 AND "UP"   
        'one button in the first and last floor'
        SET last button  of FloorButtonList TO floorAmount AND "DOWN"
        SET index to 2
        
        FOR floorAmount                               
            INIT newButton TO INSTANTIATE callButon  with index AND "UP" TO FloorButtonList 
            ADD newButton TO FloorButtonList
            INIT newButton TO INSTANTIATE callButon with index AND "Down" TO FloorButtonList 
            ADD newButton TO FloorButtonList
        END WHILE 
    END SEQUENCE
    SEQUENCE backToBase WITH 
    IF requestListFloor is empty                                  
            FOR EACH elevator IN elevatorList   
                IF elevator requestListLanding is empty  AND psoition of elevator  is NOT EQUAL 1
                        CALL moveElevator WITH elevator AND 1 AND "DOWN"
                        CALL safetyProcedure WITH elevator
                    ENDIF
                END IF
            END FOR
    END IF
END SEQUENCE

    SEQUENCE requestELEvator USING requestedFloor AND direction
        CALL getBestElevator WITH requestedFoor AND direction RETURNING elevator
        ADD  requestedFloor TO requestList
        CALL sortList WITH requestList 
        CALL moveElevator WITH elevator AND requestedFloor
        CALL openDoors WITH elevator
        CALL updateList with requestedFloor
    ENDSEQUENCE 

    CALL createElevatorList USING elevatorAmount 
    CALL createFloorButtonList USING FloorAmount 
ENDDEFINE 

DEFINE elevator USING id AND floorPosition AND status AND weightMax

    id: id
    status: status 'STOP, Moving and idle'
    door: SET TO close by default 'can be open or close'
    direction: SET TO none by default 'can be up down or none'
    maxCapacity: maxCapacity
    doorSensor: SET TO boolean
    openDoorDelay: SET TO xvalue
    weightSensor: SET TO ON    
    elevatorPanelButtonList  SET to empty list   
    requestlandingList SET to empty list  

    'The panel of elevator have the nimber of all floors'
    SEQUENCE createElevatorPanelButtonList USING floorAmount  
        SET index TO 1
        FOR floorAmount   
            INIT newButton TO INSTANTIATE callButton WITH index  AND "notPressed"
            ADD newButton TO ElevatorPanelButtonList
            INCREMENT index  
        ENDFOR         
    END SEQUENCE

    SEQUENCE requestLanding USING requestlanding 
        ADD  requestlanding TO requestlandingList
        CALL sortList WITH requestlandingList
        CALL closeDoors WITH elevator
        CALL moveElevator WITH elevator AND requestlanding
        CALL openDoors WITH elevator
        CALL updateList with requestlanding
    ENDSEQUENCE

    SEQUENCE moveElevator WITH elevator AND destination 
       
        IF elevator door EQUAL close  AND elevator doorSensor AND elevator checkWeightCapacity 
        THEN 
            IF position of elevator  LESS THAN destination 
            THEN
                WHILE elevator position NOT EQUAL destination
                    INCREMENT elevator position BY 1
                    display elevator position
                END WHILE
                    CALL setElevatorStatus WITH elevator AND stop
                    CALL elevatorOpenDoor 
                ENDIF
                IF position of elevator  GREATER THAN destination 
                THEN
                    WHILE elevator position NOT EQUAL destination
                        INCREMENT elevator position BY -1
                        display elevator position
                    END WHILE
                    CALL setElevatorStatus WITH elevator AND stop
                    CALL OpenDoor 
                ENDIF 
        ENDIF
    ENDSEQUENCE

    SEQUENCE checkWeightCapacity USING elevator
        IF elevator WeightSensor > weightMax THEN
            DISPLAY ALERT Elevator Overload
            RETURN FALSE
        ELSE RETURN TRUE
        ENDIF   
    END SEQUENCE

    SEQUENCE setElevatorStatus USING elevator AND status         
        SET elevator status TO status        
    END SEQUENCE

    SEQUENCE OpenDoor          
        if elevator status NOT EQUAL  moving THEN
            SET timer To zero
            DO 
                SET elevator door TO open
                INCREMENT timer
            while timer < openDoorDelay
        ENDIF        
    END SEQUENCE

    SEQUENCE closeDoor          
        IF elevator door EQUAL open AND elevator doorSensor EQUAL TRUE AND elevator checkWeightCapacity EQUAL TRUE                 
            SET elevator door TO CLOSE                
        ENDIF        
    END SEQUENCE

    CALL createElevatorPanelButtonList USING floorAmount of column

 END DEFINE   

DEFINE callButon USING direction AND floor AND status
    status: status   by default "notPressed"                   'isPressed / not pressed'
    direction: direction
    floor: floor
ENDDEFINE

SEQUENCE getBestElevator WITH requestedFloor AND direction 

    ' PRiority To elevator in service'
    SET bestFit TO NULL
    SET closestElevator TO 1       'Default '                                   
        FOR EACH elevator IN elevatorList OF column 
            CALL isApproaching   WITH elevator AND floorCallButton RETURNING isApproaching
            CALL isSameDirection  WITH elevator direction AND direction RETURNING sameDirection  'TRUE or FALSE'
            IF isApproaching EQUAL TRUE AND sameDirection EQUAL TRUE AND (bestFit EQUAL NULL OR getDistance  WITH elevator LESS THAN  CALL getDistance  WITH bestFit ) 
                THEN
                SET bestFit TO elevator
            END IF
            'if we dont have bestFit GET THE NEAREST IDLE'
            IF elevator status EQUAL IDLE and getDistance  WITH closestElevator GREATER THAN getDistance WITH elevator THEN
                SET closestElevator TO elevator index
            END IF
        END FOR
    IF bestFit NOT NULL THEN
         RETURN bestFit 
    ELSE 
        RETURN closestElevator  'return the closest elevator with IDLE status'
    END IF
SEQUENCE
 =======  { isApproaching : is elevator approaching the floor?  } ======= 

SEQUENCE isApproaching USING elevator AND floor
        IF (elevator direction EQUAL "UP" AND elevator position LESS or EQUAL floor ) OR
         ( elevator direction EQUAL "DOWN" AND elevator position GREATER or EQUAL floor) 
        THEN
            RETURN TRUE
            ELSE RETURN FALSE
        ENDIF
END SEQUENCE

=======  { isSameDirection : is it the same direction ?  } ======= 

SEQUENCE isSameDirection USING elevator AND direction
        IF direction of elevator EQUAL direction THEN 
         RETURN TRUE
         ELSE RETURN FALSE      
END SEQUENCE


       =======  { getDistance : how far away?  } ======= 

SEQUENCE getDistance USING X AND Y
        return ABSOLUTE VALUE OF X - Y
END SEQUENCE


=======  { sortList : insertion sort algorithm } ======= 
SEQUENCE sortList with requestList 
        '  Insertion Sort Code adapted from https://www.baeldung.com/java-insertion-sort'
        FOR index 2 TO requestList length
            SET key to requestList index       'element from list 1 .. 10'
            SET jj  to index - 1
            while jj > or = 1 AND requestList jj > key
                'Swap elements'
                SET requestList jj + 1 to requestList jj
                SET jj to jj -1
            END WHILE
            SET requestList jj + 1 to key
        END FOR         
        
END SEQUENCE

SEQUENCE updateList USING list
    ' its a sorted list so the first element is the current destination of the elevator'
    DELETE the first element in list 'head of the list'
ENDSEQUENCE

SEQUENCE safetyProcedure  WITH elevator
    INIT doorSensor of elevator TO ON
    INIT door of elevator TO close
    INIT weightSensorof of elevator TO ON
    return TRUE
ENDSEQUENCE

------------------------------------ TESTING SECTION -----------------------------------
minFloorList[-6, 2, 21, 41] maxFloorList[1, 20, 40, 60]

INIT mainColumn TO INITIATE Column WITH "1" AND "10" AND "2" AND "ON"

Scenario:

Someone is on floor 3 and wants to go to the 7th floor. 
CALL requestELEvator OF mainBattery WITH 3 and "up"
CALL requestLanding OF mainColumn WITH 7

Someone is at floor 9 and wants to go down to the 2nd floor.
CALL requestELEvator OF mainBattery WITH 9 and "down"
CALL requestLanding OF mainColumn WITH 2