/*========================== The commercial controller ================================
/*                      
                     -Objects that need to be controlled:
/*                  1. Battery
/*                  2. 4 Columns 
/*                  3. 66 floors (basement is a floor with negative index)
/*                  4. 3 Elevators
/*                  5. Call buttons
/*                  6. Doors
/*                  7. Floor request buttons
/*                  8. Floor display
/*                   Author: Saad Eddine 
/*                   Link to video demo : https://youtu.be/OQV_e5cA7wc
/*
/*    =======================================================================================     

                          =======  { DEFINE Battery } ======= 

DEFINE Battery USING ID AND status AND amountOfColumn AND amountOfElevatorPerColumn AND minFloorList AND maxFloorList
    ID: id
    STATUS : status  'battery can be ON/OFF'
    columnList: SET to empty list of Column  
    callButtonList : SET To empty List of callButton

    SEQUENCE createColumnList USING amountOfColumn AND amountOfElevatorPerColumn AND minFloorList AND maxFloorList
        SET index TO 1
        FOR amountOfColumn           
             INIT newColumn TO INSTANTIATE Column WITH  index AND  minFloor[index] AND maxFloor[index] AND  amountOfElevatorPerColumn
             ADD newColumn TO columnList 
             INCREMENT index 
        ENDFOR 
    ENDSEQUENCE 

    SEQUENCE createCallButtonList  USING floorAmount AND minFloor
        SET index TO minFloor
        FOR floorAmount
            IF index NOT EQUAL TO 0
                IF index IS LESS THAN 1
                    INIT newCallButton TO INSTANTIATE callButton WITH "down" AND index AND "notPressed"
                    ADD newButton TO callButtonList
                ENDIF
                IF index IS GREATER THAN 1
                    INIT newCallButton TO INSTANTIATE callButton WITH "up" AND index AND "notPressed"
                    ADD newButton TO callButtonList
                ENDIF
            ENDIF
            INCREMENT index  
        ENDFOR  
    ENDSEQUENCE

    SEQUENCE requestELEvator USING requestedFloor AND direction
        CALL getBestElevator WITH requestedFoor  RETURNING elevator
        ADD  requestedFloor TO requestList OF elevator
        CALL sortList WITH requestList OF elevator
        CALL moveElevator WITH elevator AND requestedFloor
        CALL openDoors WITH elevator
        CALL updateList with requestedFloor
    ENDSEQUENCE
    
    SEQUENCE requestFloor  USING callButton
        SET floor TO floor of callButton 
        SET direction TO  direction of callButton

        CALL getBestElevator WITH floor RETURNING elevator
        ADD  floor TO requestList OF elevator
        CALL requestList WITH requestList OF elevator
        CALL moveElevator WITH elevator AND 1  'Go back to RC'
        CALL openDoors WITH elevator
        CALL updateList with requestedFloor
    ENDSEQUENCE

    SEQUENCE monotoringCallButtonList
        FOR EACH button IN callButtonList 
          IF status of button EQUAL "isPressed" THEN
            CALL requestELEvator USING floor of button
          ENDIF
        ENDFOR
    ENDSEQUENCE

    SEQUENCE scheduleElevator USING DATE AND TIME   
    FOR column IN columnList
        FOR elevator in elevatorList of column
            IF day of DATE in [monday .. friday] AND elevator requestList IS empty
                IF hour of TIME in [06 .. 12]
                CALL moveElevator  with elevator AND 1   
                ELSE IF hour of TIME in [15 .. 17]
                CALL moveElevator  with elevator AND minFloor of column
            ENDIF              
        ENDFOR
    ENDFOR
ENDSEQUENCE
    CALL createColumnList WITH amountOfColumn AND amountOfElevatorPerColumn
    CALL createCallButtonList WITH floorAmount AND minFloor
    CALL scheduleElevator WITH SystemDATE AND SystemTIME
    CALL monotoringCallButtonList
ENDDEFINE
 
                               =======  { DEFINE Column } ======= 
DEFINE Column USING id AND amountFloor AND minFloor AND maxFloor AND nbElevatorPerColumn
    id: id
    statuts: SET ON AS DEFAULT 'ON/OFF'
    amountFloor: amountFloor 
    minFloor: minFloor
    maxFloor: maxFloor
    elevatorList: SET To empty List of elevator 

    SEQUENCE createElevatorList USING nbElevatorPerColumn
        SET index TO 1
        FOR nbElevatorPerColumn
            INIT newElevator TO INSTANTIATE Elevator WITH index AND "IDLE"  AND "close" AND "NONE" AND "800kg"
            ADD newElevator TO elevatorList 
            INCREMENT index
        ENDFOR
    ENDSEQUENCE

CALL createElevatorList WITH nbElevatorPerColumn
ENDDEFINE

                                 =======  { DEFINE Elevator } ======= 
DEFINE Elevator USING id AND status 
    id: id
    status: status 'STOP, Moving and idle'
    door: SET TO close by default 
    direction: SET TO none by default 'can be up down or none'
    maxCapacity: maxCapacity
    requestList: SET To empty List
    doorSensor: SET TO boolean
    openDoorDelay: SET TO xvalue
    weightSensor: SET TO

    SEQUENCE checkWeightCapacity USING elevator weightSensor AND elevator weightMax
         IF WeightSensor > weightMax THEN
            DISPLAY ALERT Elevator Overload
            RETURN FALSE
        ELSE RETURN TRUE
        ENDIF   
    END SEQUENCE

    SEQUENCE moveElevator WITH elevator AND destination 
        IF elevator door EQUAL close  AND elevator doorSensor AND elevator checkWeightCapacity 
        THEN 
            IF position of elevator  LESS THAN destination 
            THEN
                WHILE elevator position NOT EQUAL destination
                    INCREMENT elevator position BY 1
                    display elevator position
                END WHILE
                    CALL setElevatorStatus WITH elevator AND stop
                    CALL elevatorOpenDoor 
                ENDIF
                IF position of elevator  GREATER THAN destination 
                THEN
                    WHILE elevator position NOT EQUAL destination
                        INCREMENT elevator position BY -1
                        display elevator position
                    END WHILE
                    CALL setElevatorStatus WITH elevator AND stop
                    CALL OpenDoor 
                ENDIF 
        ENDIF
    ENDSEQUENCE

    SEQUENCE checkWeightCapacity USING elevator
        IF elevator WeightSensor > weightMax THEN
            DISPLAY ALERT Elevator Overload
            RETURN FALSE
        ELSE RETURN TRUE
        ENDIF   
    END SEQUENCE

    SEQUENCE setElevatorStatus USING elevator AND status         
        SET elevator status TO status        
    END SEQUENCE

    SEQUENCE OpenDoor          
        if elevator status NOT EQUAL  moving THEN
            SET timer To zero
            DO 
                SET elevator door TO open
                INCREMENT timer
            while timer < openDoorDelay
        ENDIF        
    END SEQUENCE

    SEQUENCE CloseDoor          
        IF elevator door EQUAL open AND elevator doorSensor EQUAL TRUE AND elevator checkWeightCapacity EQUAL TRUE                 
            SET elevator door TO CLOSE                
        ENDIF        
    END SEQUENCE

ENDDEFINE

                                 =======  { DEFINE CallButton} ======= 

DEFINE callButon USING direction AND floor AND status
    status: status   by default "notPressed"                   'isPressed / not pressed'
    direction: direction
    floor: floor
ENDDEFINE


SEQUENCE getBestElevator USING requestedFloor and direction
    CALL getColumn USING requestedFloor returning column
    SET bestFit TO NULL
    SET closestElevator TO NULL
                                     
        FOR EACH elevator IN column  elevatorList
                'Check if the elevator is appoaching to the requested floor, not yet overshot' 
            CALL isApproaching   WITH elevator AND requestedFloor  RETURNING isApproaching                          
            CALL isSameDirection  WITH elevator AND  direction  RETURNING sameDirection  

            IF isApproaching EQUAL TRUE AND sameDirection EQUAL TRUE AND (bestFit EQUAL NULL OR  CALL getDistance   WITH elevator LESS THAN  CALL getDistance  WITH bestFit ) 
                THEN
                SET bestFit TO elevator
            END IF
            'if we dont have bestFit (short distance + same distance) '
            'GET THE NEAREST elevator or IDLE'
            IF elevator status EQUAL IDLE OR  getDistance  WITH closestElevator GREATER THAN  getDistance WITH elevator 
            THEN
                SET closestElevator TO elevator 
            END IF
        END FOR
        ' if there are a best elevator return bestFit else return the closest elevator no matter direction or elevator IDLE'
    IF bestFit NOT NULL THEN
         RETURN bestFit 
    ELSE 
        RETURN closestElevator  
    END IF 
ENDSEQUENCE

 =======  { getColumn: return the correspondant column } ======= 

 SEQUENCE getColumn USING floorLevel
    CASE floorLevel 
        IN -6 to 1  : RETURN 1 
        IN 2 to 20  : RETURN 2 
        IN 21 to 40 : RETURN 3
        IN 41 to 60 : RETURN 4
    ENDCASE
END SEQUENCE

       =======  { isApproaching : is elevator approaching the floor?  } ======= 

SEQUENCE isApproaching USING elevator AND floor

        IF (elevator direction EQUAL "UP" AND elevator position LESS or EQUAL floor ) OR
         ( elevator direction EQUAL "DOWN" AND elevator position GREATER or EQUAL floor) 
        THEN
            RETURN TRUE
            ELSE RETURN FALSE
        ENDIF
END SEQUENCE

       =======  { isSameDirection : is it the same direction ?  } ======= 

SEQUENCE isSameDirection USING elevator AND direction
        IF direction of elevator EQUAL direction THEN 
         RETURN TRUE
         ELSE RETURN FALSE      
END SEQUENCE


       =======  { getDistance : how far away?  } ======= 

SEQUENCE getDistance USING X AND Y
        return ABSOLUTE VALUE OF X - Y
END SEQUENCE


=======  { sortList : insertion sort algorithm } ======= 
SEQUENCE sortList with requestList 
        '  Insertion Sort Code adapted from https://www.baeldung.com/java-insertion-sort'
        FOR index 2 TO requestList length
            SET key to requestList index       'element from list 1 .. 10'
            SET jj  to index - 1
            while jj > or = 1 AND requestList jj > key
                'Swap elements'
                SET requestList jj + 1 to requestList jj
                SET jj to jj -1
            END WHILE
            SET requestList jj + 1 to key
        END FOR         
        
END SEQUENCE

SEQUENCE updateList USING list
    ' its a sorted list so the first element is the current destination of the elevator'
    DELETE the first element in list 'head of the list'
ENDSEQUENCE

------------------------------------ TESTING SECTION -----------------------------------
minFloorList[-6, 2, 21, 41] maxFloorList[1, 20, 40, 60]

INIT mainBattery TO INITIATE Battery WITH "1" AND "On" AND "3" AND minFloorList AND maxFloorList

Scenarios:
Someone at RC wants to go to the 20th floor.
CALL requestELEvator OF mainBattery WITH 20 and "up"
-------------------------
Someone at RC wants to go to the 36th floor.
CALL requestELEvator OF mainBattery WITH 36 and "up"
-------------------------
Someone at 54e floor wants to go to RC.
CALL requestFloor  OF mainBattery WITH "54"
